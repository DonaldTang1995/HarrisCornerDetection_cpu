#include<opencv.hpp>
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include<algorithm>
using namespace std;
using namespace cv;
const int thresh = 128;
void sobel(Mat &src, Mat &dstx,Mat &dsty)
{
	int rows = src.rows, cols = src.cols;
	dstx = Mat(rows, cols, CV_32FC1);
	dsty = Mat(rows, cols, CV_32FC1);
	Mat temp(rows + 2, cols + 2, CV_32FC1);
	for (int i = 1; i <= rows ; i++)
	{
		for (int j = 1; j <= cols ; j++)
		{
			
				temp.at<float>(i, j) = src.at<uchar>(i - 1, j - 1);
				//cout << i << ' ' << j << endl;
		}
	}
	temp.at<float>(0, 0) = src.at<uchar>(1, 1);
	temp.at<float>(0, cols + 1) = src.at<uchar>(1, cols - 2);
	temp.at<float>(rows + 1, 0) = src.at<uchar>(rows - 2, 1);
	temp.at<float>(rows + 1, cols + 1) = src.at<uchar>(rows - 2, cols -2);
	for (int i = 1; i <= cols; i++)
	{
		temp.at<float>(0, i) = src.at<uchar>(1, i-1);
		temp.at<float>(rows+1, i) = src.at<uchar>(rows-2, i-1);
	}
	for (int i = 1; i <= rows; i++)
	{
		temp.at<float>(i, 0) = src.at<uchar>(i-1, 1);
		temp.at<float>(i, cols+1) = src.at<uchar>(i-1,cols-2);
	}
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (i == 365 && j == 0)
			{
				int u = 0;
			}
			float a=dstx.at<float>(i, j) = 2 * (temp.at<float>(i + 2, j + 1) - temp.at<float>(i, j + 1)) + (temp.at<float>(i + 2, j + 2) 
				- temp.at<float>(i, j + 2))+ (temp.at<float>(i + 2, j) - temp.at<float>(i, j));
			float b=dsty.at<float>(i, j) = 2 * (temp.at<float>(i + 1, j + 2) - temp.at<float>(i + 1, j)) + (temp.at<float>(i + 2, j + 2) 
				- temp.at<float>(i + 2, j))+ (temp.at<float>(i, j + 2) - temp.at<float>(i, j));
			int u = 0;
		}
	}
}
int main()
{
	Mat img = imread("1.jpg"),img_gray, Ix, Iy, IxIx, IyIy, IxIy, dst, dst_norm, IxIxg, IxIyg, IyIyg, IxSobel, IySobel;
	
	cvtColor(img, img_gray, CV_BGR2GRAY);
	int rows = img.rows, cols = img.cols;
	sobel(img_gray, Iy, Ix);
	const float k = 0.04;
	dst = Mat(rows, cols, CV_32FC1);
	pow(Ix, 2.0, IxIx);
	pow(Iy, 2.0, IyIy);
	multiply(Ix, Iy, IxIy);
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			float xx=0,xy=0,yy=0;
			for (int k = -1; k < 2; k ++)
			{
				for (int l = -1; l < 2; l++)
				{
					int x = i + k, y = j + l;
					if (x == -1)
					{
						x = 1;
					}
					if (x == rows)
					{
						x -= 2;
					}
					if (y == -1)
					{
						y = 1;
					}
					if (y == cols)
					{
						y -= 2;
					}
					float xVal = Ix.at<float>(x, y), yVal = Iy.at<float>(x, y);
					xx += xVal*xVal;
					yy += yVal*yVal;
					xy += xVal*yVal;
				}
			}
			dst.at<float>(i, j) = xx*yy - xy*xy - k*(xx + yy)*(xx + yy);
		}
	}
	imshow("dst", dst);
	normalize(dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat());

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if ((int)dst_norm.at<float>(i, j) > thresh)
			{
				circle(img_gray, Point(j, i), 5, Scalar(255), 2, 8, 0);
			}
		}
	}
	imshow("coner", img_gray);
	waitKey();
	return 0;
}
